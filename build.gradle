apply from: 'libraries.gradle'

// Logging
logging.captureStandardOutput LogLevel.WARN
println 'A message which is logged at WARN level'

apply plugin: 'eclipse'
apply plugin: 'idea'

version = '0.0.1-SHAPSHOT'

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
}

apply plugin: 'java'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    compile libraries.logging
    
    // FIXME should be accessible only by compile time, not runtime (provided by servlet container) -> should not be added to artifacts
    compile libraries.javax_servlet_api
    
    compile libraries.spring_web
}

task wrapper(type: Wrapper) {

    // The distribution will be unpacked to the $USER_HOME/.gradle/gradle/dists
    archiveBase = Wrapper.PathBase.GRADLE_USER_HOME
    archivePath = 'gradle/dists'
    distributionUrl = 'https://services.gradle.org/distributions/gradle-2.3-all.zip'
}

apply plugin: 'war'

import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

def getParallelDeploymentTimestamp() {
    final LocalDateTime now = LocalDateTime.now();
    final DateTimeFormatter formatter = DateTimeFormatter.ofPattern("uuuuMMdd-HHmm");
    return now.format(formatter)
}

ext {
    parallelDeploymentTimestamp = getParallelDeploymentTimestamp()
    parallelDeploymentClassifier = "##${parallelDeploymentTimestamp}"
    webAppRootKey = "${war.baseName}.${parallelDeploymentTimestamp}.root"
    archiveNameWithClassifier = "${war.baseName}${parallelDeploymentClassifier}"
}

ext {
    tmpScriptsPath = "${buildDir}/tmp/scripts"
    webXmlXslFilePath = "${tmpScriptsPath}/update_webAppRootKey_in_web_descriptor.xsl"
    mustBeChangedDir = "${projectDir}/src/main/must_be_changed_due_to_parallel_deployment"
    webXmlFileName = 'web.xml'
    originalWebXmlFilePath = "${mustBeChangedDir}/${webXmlFileName}"
    generatedForWarDir = "${buildDir}/generated-for-war"
    generatedWebXmlFilePath = "${generatedForWarDir}/WEB-INF/${webXmlFileName}"
}

task generateXslFileForWebXml() << {
	mkdir("${tmpScriptsPath}")
	def xslFile = new File("${webXmlXslFilePath}")
	xslFile.text = new StringBuilder()
		.append('<?xml version="1.0" encoding="UTF-8"?>')
		.append('<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" ')
 		.append('    xmlns:web="http://xmlns.jcp.org/xml/ns/javaee">')
		.append('')
		.append('	<xsl:output method="xml" indent="yes" />')
		.append('')
		.append('	<!-- Copy with recursion -->')
		.append('	<xsl:template match="@*|*|text()|comment()|processing-instruction()">')
		.append('		<xsl:copy>')
		.append('			<xsl:apply-templates select="@*|*|text()|comment()|processing-instruction()" />')
		.append('		</xsl:copy>')
		.append('	</xsl:template>')
		.append('')
		.append('	<xsl:template match="web:context-param[web:param-name/text() = \'webAppRootKey\']">')
		.append('		<web:context-param>')
		.append('			<web:param-name><xsl:value-of select="./web:param-name"/></web:param-name>')
		.append("			<web:param-value>${webAppRootKey}</web:param-value>")
		.append('		</web:context-param>')
		.append('	</xsl:template>')
		.append('')
		.append('</xsl:stylesheet>')
		.toString()
}

ext {
    log4jXmlXslFilePath = "${tmpScriptsPath}/update_webAppRootKey_in_log4j_xml.xsl"
    log4jXmlFileName = 'log4j2-skalicky.xml'
    originalLog4jXmlFilePath = "${mustBeChangedDir}/${log4jXmlFileName}"
    generatedLog4jXmlFilePath = "${generatedForWarDir}/WEB-INF/classes/cz/skalicky/log4j2/withbundleproperties/${log4jXmlFileName}"
}

task generateXslFileForLog4jXml() << {
	mkdir("${tmpScriptsPath}")
	def xslFile = new File("${log4jXmlXslFilePath}")
	xslFile.text = new StringBuilder()
		.append('<?xml version="1.0" encoding="UTF-8"?>')
		.append('<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">')
		.append('')
		.append('	<xsl:output method="xml" indent="yes" />')
		.append('')
		.append('	<!-- Copy with recursion -->')
		.append('	<xsl:template match="@*|*|text()|comment()|processing-instruction()">')
		.append('		<xsl:copy>')
		.append('			<xsl:apply-templates select="@*|*|text()|comment()|processing-instruction()" />')
		.append('		</xsl:copy>')
		.append('	</xsl:template>')
		.append('')
		.append('	<xsl:template match="Property[@name = \'fileBaseFolder\']">')
		.append('		<Property name="fileBaseFolder">')
		.append('			<xsl:text>${sys:')
		.append("${webAppRootKey}")
		.append('}')
		.append("/../../logs/${war.baseName}/${parallelDeploymentTimestamp}</xsl:text>")
		.append('		</Property>')
		.append('	</xsl:template>')
		.append('')
		.append('</xsl:stylesheet>')
		.toString()
}

task modifyWebAppRootKey() {
	doLast {
		ant {
			xslt(
				style: "${webXmlXslFilePath}",
				in: "${originalWebXmlFilePath}",
				out: "${generatedWebXmlFilePath}",
				force: 'true'
			)
		}
		ant {
			xslt(
				style: "${log4jXmlXslFilePath}",
				in: "${originalLog4jXmlFilePath}",
				out: "${generatedLog4jXmlFilePath}",
				force: 'true'
			)
		}
	}
	
	dependsOn generateXslFileForWebXml, generateXslFileForLog4jXml
}

war {
    archiveName = "${archiveNameWithClassifier}.${extension}"
    
    from("${generatedForWarDir}")
    
    dependsOn modifyWebAppRootKey
}

ext {
	catalinaBase = '/var/lib/tomcat8'
	tomcatWebapps = "${catalinaBase}/webapps"
}

task deployOnLocalTomcat(type: Copy) {
    println "Deployment: ${war.archivePath} -> ${tomcatWebapps}"
    from war
    into "${tomcatWebapps}"
    
    dependsOn war
}
